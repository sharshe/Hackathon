<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>  
        <property name="url" value="jdbc:mysql://0.0.0.0:3306/EmployeeData"/>
        <property name="username" value="root"/>
        <property name="password" value="my-secret-pw"/>
    </bean>

    <bean id="DBFields" class="com.keenable.hackathon.updateField" /> 
    <bean id="aggregate" class="com.keenable.hackathon.Mails" /> 

  <!-- You could also define a traditional camel context here -->
  <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

    <dataFormats>
      <json id="jsonn" library="Jackson" />
    </dataFormats>

    <restConfiguration
     component="jetty"
     host="0.0.0.0" 
     port="9080" 
     bindingMode="json"
     contextPath="/api"
     enableCORS="true">
    </restConfiguration>

    <rest id="Fino">
      <post uri="/empdata/entry">
        <route id="rest-route1" streamCache="true">
          <log id="log1" message="Request Body Recievied from user ${body} :: ${headers}"/>
          <choice>
            <when>
              <simple>${body[EmpId]} != null</simple>
          <!-- <unmarshal ref="jsonn"/> -->
          <to id="to1" uri="seda:dbEntry"/>
        </when>
        <otherwise>
          <setBody>
            <simple>{"message":"Employee Id cannot be null"} </simple>
          </setBody>
        </otherwise>
      </choice>
          <log id="log2" message="Respose Recieved from DB ${body}" />
        </route>
      </post>

      <post uri="/empdata/update">
        <route id="rest-route2" streamCache="true">
          <log id="log3" message="Request Body Recievied from user ${body} :: ${headers}"/>
          <choice>
            <when>
              <simple>${body[EmpId]} != null</simple>
              <!-- <unmarshal ref="jsonn"/> -->
              <to id="to2" uri="seda:dbUpdate"/>
            </when>
            <otherwise>
              <setBody>
                <simple>{"message":"Employee Id cannot be null"} </simple>
              </setBody>
            </otherwise>
          </choice>
          <log id="log4" message="Respose Recieved from DB ${body}" />
        </route>
      </post>

      <post uri="/empdata/search">
        <route id="rest-route3" streamCache="true">
          <log id="log27" message="Request Body Recievied from user ${body} :: ${headers}"/>
          <!-- <unmarshal ref="jsonn"/> -->
          <to id="to9" uri="seda:dbSearch"/>
          <log id="log28" message="Respose Recieved from DB ${body}" />
        </route>
      </post>
    </rest>

    <!-- <route id="file-route" streamCache="true">
      <from id="route-timer" uri="file:/home/shardul/db"/>
      <log id="log5" message="Request Body Recievied from user ${body} :: ${headers}"/>
      <to id="to3" uri="seda:dbEntry?waitForTaskToComplete=Never"/>
      <log id="log6" message="Respose Recieved from DB ${body}" />
    </route>-->

    <route id="Entry-route" streamCache="true">
      <from id="from-entry" uri="seda:dbEntry"/>
      <log id="log7" message="Request Body Recievied from user ${body} :: ${headers}"/>
      <setHeader headerName="Body">
          <simple>${body}</simple>
        </setHeader>

        <setBody>
          <simple> select * from Employee where  EmpId = '${body[EmpId]}' </simple>
      </setBody>
      <log id="log42" message="Request Body sent to DB ${body}" />
      <doTry>
        <to id="to13" uri="jdbc:dataSource"/>
        <log id="log43" message="Respose Recieved from DB ${body}" />

        <choice>
        <when>
          <simple>${body} == '' </simple>
        

 <log id="log45" message="Employee EmailID is not present" />
          <setBody>
            <simple>${header.Body}</simple>
          </setBody>

      <setBody>
          <simple> insert into Employee (EmpId,EmpName,Empmail,EmpDOB,EmpDOJ,EmpDesig,IsEmp)  values ('${body[EmpId]}','${body[EmpName]}','${body[Empmail]}','${body[EmpDOB]}','${body[EmpDOJ]}','${body[EmpDesig]}','${body[IsEmp]}')</simple>
      </setBody>
      <log id="log8" message="Request Body sent to DB ${body}" />
      <doTry>
				<to id="to4" uri="jdbc:dataSource"/>
				<doCatch>
					<exception>java.lang.Exception</exception>
					<log message="Exception Occured : ${exception}" />
          <setBody>
            <simple>{"message":"Insertion Failed"}</simple>
          </setBody>
				</doCatch>
      </doTry>
      <log id="log9" message="Respose Recieved from DB ${body}" />
      <choice>
        <when>
					<simple>${body} == null </simple>
					<log id="log10" message="Success Enable" />
          <setBody>
            <simple>{"message":"Successfully Inserted"} </simple>
          </setBody>
				</when>
				<otherwise>
					<log id="log11" message="Failure Body" />
          <setBody>
            <simple>{"message":"Insertion Failed"}</simple>
          </setBody>
				</otherwise>
			</choice>

        </when>

         <otherwise>
           <log id="log44" message="Employee EmailID is present" />
          <setBody>
            <simple>{"message":"Employee ID is already present in DB"} </simple>
          </setBody>

         </otherwise>
      </choice>
         <doCatch>
          <exception>java.lang.Exception</exception>
          <log id="log46" message="Exception Occured : ${exception}" />
          <setBody>
            <simple>{"message":"Insertion Failed"}</simple>
          </setBody>
        </doCatch>
      </doTry>
    </route>

    <route id="Update-route" streamCache="true">
      <from id="from-update" uri="seda:dbUpdate"/>
      <log id="log12" message="Request Body Recievied from user ${body} :: ${headers}"/>
      <setHeader headerName="Body">
          <simple>${body}</simple>
        </setHeader>
      
      <setBody>
          <simple> select * from Employee where  EmpId = '${body[EmpId]}' </simple>
      </setBody>
      <log id="log37" message="Request Body sent to DB ${body}" />
      <doTry>
        <to id="to12" uri="jdbc:dataSource"/>
        <log id="log38" message="Respose Recieved from DB ${body}" />

        <choice>
        <when>
          <simple>${body} == '' </simple>
          <log id="log39" message="Employee ID not present" />
          <setBody>
            <simple>{"message":"Employee ID not present in DB"} </simple>
          </setBody>
        </when>
        <!--  <when>
          <simple>${body} == null </simple>
          <log id="log391" message="when 2" />
          <setBody>
            <simple>{"message":"Employee EmailID not present"} </simple>
          </setBody>
        </when> -->
        <otherwise>
          <log id="log40" message="Employee EmailID is present" />
          <setBody>
            <simple>${header.Body}</simple>
          </setBody>

      <bean ref="DBFields" method="showData" />
      <log id="log13" message=" Secound key header : ${header.SecoundKey}"/>

      <setBody>
          <simple> update Employee SET ${header.SecoundKey} = '${body[${header.SecoundKey}]}'  where  EmpId = '${body[EmpId]}' </simple>
      </setBody>

      <log id="log14" message="Request Body sent to DB ${body}" />
      <doTry>
        <to id="to5" uri="jdbc:dataSource"/>
        <doCatch>
          <exception>java.lang.Exception</exception>
          <log id="log15" message="Exception Occured : ${exception}" />
          <setBody>
            <simple>{"message":"Updation Failed"}</simple>
          </setBody>
        </doCatch>
      </doTry>
      <log id="log16" message="Respose Recieved from DB ${body}" />
      <choice>
        <when>
          <simple>${body} == null </simple>
          <log id="log17" message="Success Enable" />
          <setBody>
            <simple>{"message":"Successfully Updated"} </simple>
          </setBody>
        </when>
        <otherwise>
          <log id="log18" message="Failure Body" />
          <setBody>
            <simple>{"message":"Updation Failed"}</simple>
          </setBody>
        </otherwise>
      </choice>

        </otherwise>
      </choice>
        <doCatch>
          <exception>java.lang.Exception</exception>
          <log id="log41" message="Exception Occured : ${exception}" />
          <setBody>
            <simple>{"message":"Updation Failed"}</simple>
          </setBody>
        </doCatch>
      </doTry>
      
     

      <setHeader headerName="CamelRestletResponse" id="_setHeader1">
        <simple>${body}</simple>
      </setHeader>
    </route>

    <route id="Schedular" streamCache="true">
      <!-- <from id="from4" uri="quartz2://timerMail?cron={{scheduler}}" /> -->
      <from uri="restlet:http://localhost:9088/Schedular?restletMethod=GET"/>
      <log id="log19" message="Schedular started at : ${date:now:yyyy-MM-dd HH:mm:ss.SSS}"/>
      <setBody>
        <simple>{{mails}}</simple>
      </setBody>
      <split >
        <tokenize token="," />
        <log id="log20" message="Schedular Processing For ${body}"/>
        <!-- <choice>
          <when>
            <simple>${body} == DOB </simple>
            <setBody>
              <simple>{{DOBSelect}}</simple>
            </setBody>
          </when>
          <otherwise>
            <setBody>
              <simple>{{DOJSelect}}</simple>
            </setBody>
          </otherwise>
        </choice> -->
        <setHeader headerName="Mailing">
          <simple>${body}</simple>
        </setHeader>

        <setBody>
          <simple>select * from Employee WHERE Emp${body} like '%-${date:now:MM-dd}' AND IsEmp='YES'</simple>
        </setBody>
      
      <log id="log21" message="Request Body sent to DB ${body}" />
      <doTry>
				<to id="to6" uri="jdbc:dataSource"/>
				
      <log id="log23" message="Respose Recieved from DB ${body}" />
       <!-- <to id="_to11" uri="velocity:DOB.vm"/> -->
        <log id="log36" message="Respose Recieved  ${body}" />
        <setHeader headerName="Content-Type" id="_setHeader6">
                <constant>text/html;charset=utf-8</constant>
             </setHeader>
      <to id="_to7" uri="seda:ToMail?waitForTaskToComplete=Never" />
      <doCatch>
        <exception>java.lang.Exception</exception>
        <log id="log22" message="Exception Occured" />
        <setBody>
          <simple>Exception Occured while Setting Data : ${exception} </simple>
        </setBody>
      </doCatch>
    </doTry>
    <setHeader headerName="dbSearch" id="dbSearch">
      <simple>${body}</simple>
    </setHeader>

    <split streaming="true" strategyRef="aggregate">
      <simple>${body}</simple>
      <setHeader headerName="mailList" id="mailList">
        <simple>${body[Empmail]}</simple>
      </setHeader>
    </split>
    <log message=" mail IDs  ${body} "/>
    <setHeader headerName="ToMail" id="ToMail">
        <simple>${body}</simple>
      </setHeader>

    </split>
    </route>

    <route id="mailer" streamCache="true">  
      <from id="fromMail" uri="seda:ToMail" />
      <log id="log24" message="Mailing For ${header.Mailing} | Body : ${body}"/>
      <choice>
        <when>
          <simple>${header.Mailing} == 'DOB' </simple>
          <setHeader headerName="Subject">
            <simple>{{DOBSubject}}</simple>
          </setHeader>
        </when>
        <otherwise>
          <setHeader headerName="Subject">
            <simple>{{DOJSubject}}</simple>
          </setHeader>
        </otherwise>
      </choice>
      
      <setHeader headerName="From" id="_setHeader2">
          <simple>{{FromMail}}</simple>
      </setHeader>
      <setHeader headerName="To" id="_setHeader3">
        <simple>{{ToMail}}</simple>
      </setHeader> 
      <setHeader headerName="bcc" id="_setHeader4">
        <simple>{{MailIDAll}}</simple>
      </setHeader>
      <convertBodyTo type="java.lang.String"/>
      <log id="_log25" message="Mail Body : ${body} | Headers : ${headers}"/>
      <doTry>
      <to id="_to8" uri="smtps://smtp.gmail.com:465?username=shardul.shekhar@fosteringlinux.com&amp;password=Shar@redhat&amp;mail.smtp.starttls.enable=true"/>
      <doCatch>
        <exception>java.lang.Exception</exception>
        <log id="log34" message="Exception Occured" />
        <setBody>
          <simple>Exception Occured while Sending Mail : ${exception} </simple>
        </setBody>
        <setHeader headerName="Exchange.HTTP_QUERY" id="_setHeader11">
          <simple>phone={{Mobile}}&amp;text={{text}}&amp;apikey={{apikey}}</simple>
      </setHeader>
        <to id="to11" uri="jetty:https://api.callmebot.com/whatsapp.php?" />
        <log id="_log35" message="whatsapp alert sent :"/>
      </doCatch>
    </doTry>
      <log id="_log26" message="mail sent :"/>
      <choice>
        <when>
          <simple>${header.CamelRestletResponse} == 'HTTP/1.1 - OK (200) - The request has succeeded' </simple>
          <setBody>
            <simple>{"successfull":"mail sent"}</simple>
          </setBody>
        </when>
        <otherwise>
          <setBody>
            <simple>{"response":"failure"}</simple>
          </setBody>
        </otherwise>
      </choice>
    </route>
    
    <route id="Search-route" streamCache="true">
      <from id="from-search" uri="seda:dbSearch"/>
      <log id="log29" message="Request Body Recievied from user ${body} :: ${headers}"/>
      <bean ref="DBFields" method="getKey" />
      <log id="log30" message=" Header key : ${header.key}"/>
      <choice>
        <when>
          <simple>${header.key} == 'month'</simple>
          <setBody>
              <simple> select * from Employee where ${header.key} like '%$-{body[${header.key}]}-%' </simple>
          </setBody>
        </when>
        <otherwise>
          <setBody>
              <simple> select * from Employee where ${header.key} like '%${body[${header.key}]}%' </simple>
          </setBody>
        </otherwise>
      </choice>

      <log id="log31" message="Request Body sent to DB ${body}" />
      <doTry>
				<to id="to10" uri="jdbc:dataSource"/>
				<doCatch>
          <exception>java.lang.Exception</exception>
          <log id="log32" message="Exception Occured" />
          <setBody>
            <simple>{ "message" : "Search Failed" }</simple>
          </setBody>
				</doCatch>
      </doTry>
      <log id="log33" message="Respose Recieved from DB ${body}" />
      <!--  <to id="_to11" uri="velocity:DOB.vm"/>
        <log id="log36" message="Respose Recieved  ${body}" /> -->
	 <marshal>
            <json library="Jackson"/>
      </marshal>
	<setBody>
            <simple>${body}</simple>
          </setBody>
      <setHeader headerName="CamelRestletResponse" id="_setHeader5">
        <simple>${body}</simple>
      </setHeader>
    </route>

  </camelContext>

</beans>
